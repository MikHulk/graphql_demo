-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CustomersApi.Query exposing (..)

import CustomersApi.InputObject
import CustomersApi.Interface
import CustomersApi.Object
import CustomersApi.Scalar
import CustomersApi.ScalarCodecs
import CustomersApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias BuildingsOptionalArguments =
    { label : OptionalArgument String
    , area : OptionalArgument CustomersApi.InputObject.AreaInput
    , customerName : OptionalArgument String
    }


buildings :
    (BuildingsOptionalArguments -> BuildingsOptionalArguments)
    -> SelectionSet decodesTo CustomersApi.Object.Building
    -> SelectionSet (List decodesTo) RootQuery
buildings fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { label = Absent, area = Absent, customerName = Absent }

        optionalArgs____ =
            [ Argument.optional "label" filledInOptionals____.label Encode.string, Argument.optional "area" filledInOptionals____.area CustomersApi.InputObject.encodeAreaInput, Argument.optional "customerName" filledInOptionals____.customerName Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "buildings" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias SitesOptionalArguments =
    { label : OptionalArgument String
    , customerName : OptionalArgument String
    }


sites :
    (SitesOptionalArguments -> SitesOptionalArguments)
    -> SelectionSet decodesTo CustomersApi.Object.Site
    -> SelectionSet (List decodesTo) RootQuery
sites fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { label = Absent, customerName = Absent }

        optionalArgs____ =
            [ Argument.optional "label" filledInOptionals____.label Encode.string, Argument.optional "customerName" filledInOptionals____.customerName Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sites" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias CustomersOptionalArguments =
    { name : OptionalArgument String }


customers :
    (CustomersOptionalArguments -> CustomersOptionalArguments)
    -> SelectionSet decodesTo CustomersApi.Object.Customer
    -> SelectionSet (List decodesTo) RootQuery
customers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { name = Absent }

        optionalArgs____ =
            [ Argument.optional "name" filledInOptionals____.name Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "customers" optionalArgs____ object____ (Basics.identity >> Decode.list)

-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module CustomersApi.InputObject exposing (..)

import CustomersApi.Interface
import CustomersApi.Object
import CustomersApi.Scalar
import CustomersApi.ScalarCodecs
import CustomersApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAreaInput :
    AreaInputRequiredFields
    -> AreaInput
buildAreaInput required____ =
    { bottomCorner = required____.bottomCorner, topCorner = required____.topCorner }


type alias AreaInputRequiredFields =
    { bottomCorner : PositionInput
    , topCorner : PositionInput
    }


{-| Type for the AreaInput input object.
-}
type alias AreaInput =
    { bottomCorner : PositionInput
    , topCorner : PositionInput
    }


{-| Encode a AreaInput into a value that can be used as an argument.
-}
encodeAreaInput : AreaInput -> Value
encodeAreaInput input____ =
    Encode.maybeObject
        [ ( "bottomCorner", encodePositionInput input____.bottomCorner |> Just ), ( "topCorner", encodePositionInput input____.topCorner |> Just ) ]


buildCustomerInput :
    CustomerInputRequiredFields
    -> CustomerInput
buildCustomerInput required____ =
    { name = required____.name }


type alias CustomerInputRequiredFields =
    { name : String }


{-| Type for the CustomerInput input object.
-}
type alias CustomerInput =
    { name : String }


{-| Encode a CustomerInput into a value that can be used as an argument.
-}
encodeCustomerInput : CustomerInput -> Value
encodeCustomerInput input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ) ]


buildPositionInput :
    PositionInputRequiredFields
    -> PositionInput
buildPositionInput required____ =
    { long = required____.long, lat = required____.lat }


type alias PositionInputRequiredFields =
    { long : CustomersApi.ScalarCodecs.Decimal
    , lat : CustomersApi.ScalarCodecs.Decimal
    }


{-| Type for the PositionInput input object.
-}
type alias PositionInput =
    { long : CustomersApi.ScalarCodecs.Decimal
    , lat : CustomersApi.ScalarCodecs.Decimal
    }


{-| Encode a PositionInput into a value that can be used as an argument.
-}
encodePositionInput : PositionInput -> Value
encodePositionInput input____ =
    Encode.maybeObject
        [ ( "long", (CustomersApi.ScalarCodecs.codecs |> CustomersApi.Scalar.unwrapEncoder .codecDecimal) input____.long |> Just ), ( "lat", (CustomersApi.ScalarCodecs.codecs |> CustomersApi.Scalar.unwrapEncoder .codecDecimal) input____.lat |> Just ) ]


buildSiteInput :
    SiteInputRequiredFields
    -> (SiteInputOptionalFields -> SiteInputOptionalFields)
    -> SiteInput
buildSiteInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { area = Absent, address = Absent, zipCode = Absent, city = Absent }
    in
    { label = required____.label, area = optionals____.area, address = optionals____.address, zipCode = optionals____.zipCode, city = optionals____.city }


type alias SiteInputRequiredFields =
    { label : String }


type alias SiteInputOptionalFields =
    { area : OptionalArgument AreaInput
    , address : OptionalArgument (List String)
    , zipCode : OptionalArgument String
    , city : OptionalArgument String
    }


{-| Type for the SiteInput input object.
-}
type alias SiteInput =
    { label : String
    , area : OptionalArgument AreaInput
    , address : OptionalArgument (List String)
    , zipCode : OptionalArgument String
    , city : OptionalArgument String
    }


{-| Encode a SiteInput into a value that can be used as an argument.
-}
encodeSiteInput : SiteInput -> Value
encodeSiteInput input____ =
    Encode.maybeObject
        [ ( "label", Encode.string input____.label |> Just ), ( "area", encodeAreaInput |> Encode.optional input____.area ), ( "address", (Encode.string |> Encode.list) |> Encode.optional input____.address ), ( "zipCode", Encode.string |> Encode.optional input____.zipCode ), ( "city", Encode.string |> Encode.optional input____.city ) ]
